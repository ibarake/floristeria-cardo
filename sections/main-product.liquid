<div data-main-product="{{ product.selected_or_first_available_variant.id }}">

  <product-form class="main-product">
    <main-pr-container>
      <div class="flor22-3">
        {% render 'Flor-2' %}
      </div>
      <div class="flor11-3">
        {% render 'Flor-p-1' %}
      </div>
      <div class="flor11-2">
        {% render 'Flor-1' %}
      </div>
      <product-page>
        {{ product.featured_image | img_tag: product.featured_image.alt, 'image-product', '535x533' }}
      </product-page>
      <product-information>
        <p class="subtitulo-3" id="pr-subtitle">
          {{ product.collections[0].title }}
        </p>
        <h3 class="titulo-3" id="pr-title">
          {{ product.title }}
        </h3>
        <h5 class="titulo-5" id="pr-price">
          {{ product.price | money }}
        </h5>
        <product-page id="responsive-image">
          {{ product.featured_image | img_tag: product.featured_image.alt, 'responsive-image-2', '500x500' }}
        </product-page>
        <p class="subtitulo-6" id="pr-description">
          {{ product.description | strip_html }}
        </p>
        <container-buttons>
          <select name="id" style="display: none;">
            {% for variant in product.variants %}
              <option
                value="{{ variant.id }}"
                {% if variant == product.selected_or_first_available_variant %}
                  selected="selected"
                {% endif %}
              >
                {{ variant.title }} - {{ variant.price | money }}
              </option>
            {% endfor %}
          </select>
          <quantity>
            <input type="button" value="-" class="pq-button button-minus" data-field="quantity">
            <input readonly type="number" step="1" max="" value="1" name="quantity" class="quantity-field">
            <input type="button" value="+" class="pq-button button-plus" data-field="quantity">
          </quantity>

          <add-to-car id="atc">
            <button class="atc-product add-t-cart grow fbt-btn-atc">
              {% render 'icon-cart' %}
              <p class="add-t-cart-text subtitulo-2">
                {{ section.settings['button-title'] }}
              </p>
            </button>
          </add-to-car>
          <payment class="subtitulo-2 payment-1 grow">
            <button
              class="buy-now-button button button--primary btn btn-primary subtitulo-3"
              type="button"
              data-text-add-selected="Comprar ahora"
            >
              Comprar ahora
            </button>
          </payment>
        </container-buttons>
        <faq class="faq-container" id="description-product">
          <question class="FAQ-title subtitulo-3">
            <h3 class="subtitulo-3">
              {{ section.settings['description-title'] }}
            </h3>
            {% render 'icon-arrow-right-dropdown' %}
          </question>
          <answer class="FAQ-text parrafo-2">
            {{ product.description | strip_html }}
          </answer>
        </faq>
        <p class="titulo-5" style="margin-bottom: 0px;">CÃ³mpralo con</p>
        <container-spam>
          {% liquid
            comment
              Snippet Options
            endcomment
            assign heading_title = ''
            assign heading_size = 'h3'
            assign item_width = '33%'
            assign limit = 999
            assign text_align = 'left'
            assign img_width = 500
            assign img_height = 500
            assign upsell_tag = 'upsell:'
            assign text_add_this = ''
            assign text_total_price = 'Total Combo'
            assign text_add_selected = 'Agregar combo al carrito'
          %}
          <style>

          </style>

          <script>
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            

    

    window.addEventListener('DOMContentLoaded', (event) => { 
    var keepBuying = document.querySelector('.keep-buying');
    keepBuying.addEventListener('click', () => {
      document.querySelector('.added-to-cart').style.display = 'none';
    })
    var viewCart = document.querySelector('.view-cart');
      viewCart.addEventListener('click', () => {
        location.href = window.cart_route
      })
    window.money_format = "{{ shop.money_format }}"
    window.cart_route = "{{ routes.cart_url }}"

    class FrequentlyBoughtTogether extends HTMLElement {
        constructor () {
            super()

            this.querySelectorAll('.fbt-variant-select').forEach((select) => {
                select.addEventListener('change', () => {
                    this.onSelectChange(select)
                })
            })

            this.querySelectorAll('.fbt-add-checkbox').forEach((checkbox) => {
                checkbox.addEventListener('change', () => {
                    this.onCheckboxChange(checkbox)
                })
            })

            document.querySelector('.fbt-btn-atc').addEventListener('click', (event) => {
                event.preventDefault();
                this.displayCartItems();
            })
            document.querySelector('.buy-now-button').addEventListener('click', function() {
                const fbt = document.querySelector('frequently-bought-together');
                fbt.addSelectedToCart(true);
            });
        }

        // Function to display cart items in the popup
        async displayCartItems() {
          await this.addSelectedToCart(false);
          fetch('/cart.js')
          .then(response => response.json())
          .then(cart => {
            const cartItemsContainer = document.querySelector('.cart-items-list');
            cartItemsContainer.innerHTML = '';  // Clear previous items
            
            cart.items.forEach(item => {
              const cartItem = document.createElement('div'); // Create a table row
              cartItem.innerHTML = `
                <div class="parrafo-3">
                <image class="cart-item-image">
                  <img class="cart-image-tag" src="${item.image}" alt="${item.title}" width="85">
                </image>
                <div class="pop-text-container">
                  <p class="parrafo-5 collection-tag">{{ product.collections[0].title }}</p>
                  <p class="pc-title subtitulo-3">${item.title}</p>
                </div>
                <p class="quantity pc-title subtitulo-1">${'x' + item.quantity}</p>
                <p class="parrafo-2 price">${'$' + parseFloat(item.price).toFixed(2)}</p>
                </div>
              `;
              cartItemsContainer.appendChild(cartItem);
            });
          });
        }
      
        onSelectChange (select) {
            const { image, comparePrice, price } = select.options[select.selectedIndex].dataset

            const productItem = select.closest('.fbt-product-item')
            const imgEl = productItem.querySelector('.fbt-product-img')
            const comparePriceEl = productItem.querySelector('.fbt-product-price-compare')
            const priceEl = productItem.querySelector('.fbt-product-price-final')

            if (image) {
                imgEl.setAttribute('src', image)
            }

            if (comparePrice) {
                comparePriceEl.style.display = 'inline-block'
                comparePriceEl.querySelector('s').textContent = this.moneyFormat(comparePrice)
            } else {
                comparePriceEl.style.display = 'none'
                comparePriceEl.querySelector('s').textContent = ''
            }
            
            priceEl.textContent = this.moneyFormat(price)

            this.calcTotalPrice()
        }

        onCheckboxChange (checkbox) {
            const productItem = checkbox.closest('.fbt-product-item')
            const imgEl = productItem.querySelector('.fbt-product-img')

            if (checkbox.checked) {
                productItem.querySelector('label svg').style.opacity = '1';
            } else {
                productItem.querySelector('label svg').style.opacity = '0';
            }
            
            this.calcTotalPrice()
        }

        calcTotalPrice() {
            let totalPrice = 0;
        
            this.querySelectorAll('.fbt-variant-select').forEach((select) => {
                if (select.closest('.fbt-product-item').querySelector('.fbt-add-checkbox').checked) {
                    totalPrice += Number(select.options[select.selectedIndex].dataset.price);
                }
            });
        
            const totalPriceElement = this.querySelector('.fbt-total-price');
            if (totalPriceElement) {
                totalPriceElement.innerHTML = this.moneyFormat(totalPrice);
            } else {
                console.warn('Element with class .fbt-total-price not found.');
            }
        
            if (totalPrice === 0) {
                this.querySelector('.fbt-btn-atc').disabled = true;
            } else {
                this.querySelector('.fbt-btn-atc').disabled = false;
            }
        }


        async addSelectedToCart (redirectToCheckout = false) {
            const mainProductId = document.querySelector('[data-main-product]').getAttribute('data-main-product');
    const mainProductQuantity = parseInt(document.querySelector('.main-product .quantity-field').value);

    const btn = document.querySelector('.fbt-btn-atc');
    btn.style.width = `${btn.clientWidth}px`;

    btn.innerHTML = `
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    `;

    const items = [];

    // Add the main product to the items array
  /*  items.push({
        id: Number(mainProductId),
        quantity: mainProductQuantity
    }); */

    // Add the checked products from the Frequently Bought Together section to the items array
this.querySelectorAll('.fbt-variant-select').forEach((select) => {
    if (select.closest('.fbt-product-item').querySelector('.fbt-add-checkbox').checked) {
        const variantId = Number(select.value); // Get the selected variant's ID
        const quantity = 1; // Assuming default quantity is 1 for each product in FBT. Adjust as necessary.
        items.push({
            id: variantId,
            quantity: quantity
        });
    }
});

    await fetch('/cart/add.js', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ items })
    });
        
             if (redirectToCheckout) {
            // Redirect to checkout instead of cart drawer or cart page
            location.href = "/cart";
        } else {
            if (document.querySelector('#cart-drawer')) {
                btn.innerHTML = btn.dataset.textAddSelected
                loadEgCartDrawer(true)
            } else {
                btn.innerHTML = `
                    {% render 'icon-cart' %}
                <p class="add-t-cart-text subtitulo-2">
                  {{ section.settings['button-title'] }}
                </p>
                `;
                var popup = document.querySelector('.added-to-cart');
                popup.style.display = 'flex'
            }
        }
        }

        // Shopify format money (helper function)
        // https://gist.github.com/stewartknapman/8d8733ea58d2314c373e94114472d44c
        moneyFormat (cents, format) {
            if (typeof cents === 'string') {
                cents = cents.replace('.', '');
            }
            let value = '';
            const placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
            const formatString = (format || window.money_format);

            function defaultOption(opt, def) {
                return (typeof opt === 'undefined' ? def : opt);
            }

            function formatWithDelimiters(number, precision, thousands, decimal) {
                precision = defaultOption(precision, 2);
                thousands = defaultOption(thousands, ',');
                decimal = defaultOption(decimal, '.');

                if (Number.isNaN(number) || number == null) { return 0; }

                number = (number / 100.0).toFixed(precision);

                const parts = number.split('.');
                const dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands);
                cents = parts[1] ? (decimal + parts[1]) : '';

                return dollars + cents;
            }

            switch (formatString.match(placeholderRegex)[1]) {
                case 'amount': value = formatWithDelimiters(cents, 2); break;
                case 'amount_no_decimals': value = formatWithDelimiters(cents, 0); break;
                case 'amount_with_comma_separator': value = formatWithDelimiters(cents, 2, '.', ','); break;
                case 'amount_no_decimals_with_comma_separator': value = formatWithDelimiters(cents, 0, '.', ','); break;
            }

            return formatString.replace(placeholderRegex, value);
        }
    }
    customElements.define('frequently-bought-together', FrequentlyBoughtTogether)
})

const initialize = () => {
  // Select all checkboxes within the frequently-bought-together container
  const checkboxes = document.querySelectorAll('.fbt-add-checkbox-wrapper .fbt-add-checkbox');

  // Loop through each checkbox
  checkboxes.forEach(checkbox => {
    // Find the closest SVG to the checkbox
    const svg = checkbox.closest('.fbt-add-checkbox-wrapper').querySelector('svg');
    const label = checkbox.closest('.fbt-add-checkbox-wrapper').querySelector('label');
    if (svg && label) {
      // If the checkbox is checked
      if (checkbox.checked) {
        svg.style.opacity = '1'; // Show the SVG
        label.style.backgroundColor = '#2D9CDB'; // Set the label background color to blue
        label.style.border = 'none'; // Remove the border
      } else {
        svg.style.opacity = '0'; // Hide the SVG with opacity
        label.style.backgroundColor = 'transparent'; // Reset the label background color
        label.style.border = '1px solid var(--main-gray)'; // Set the border to grey
      }
    }
  });
}

document.addEventListener('DOMContentLoaded', function() {
initialize();
})






















          </script>
          {% if section.settings['agregar-combo'] == blank %}
            <style>
              add-combo{
                display: none;
              }
            </style>
          {% endif %}
          <add-combo>
            {% liquid
              assign product_handles = product.handle | append: ','
              for tag in product.tags
                if tag contains upsell_tag
                  assign handle = tag | split: ':' | last
                  assign product_handles = product_handles | append: handle | append: ','
                endif
              endfor
              assign product_handles = product_handles | split: ','
            %}

            {% if product_handles.size < 1 %}
              <style>
                frequently-bought-together{
                  display: none;
                }
              </style>
            {% endif %}
            <frequently-bought-together>
              {% comment %}
                <div class="payment-1">
                  <button
                    class="fbt-btn-atc button button--primary btn btn-primary subtitulo-3"
                    type="button"
                    data-text-add-selected="{{ text_add_selected }}"
                  >
                    {{ text_add_selected }}
                  </button>
                </div>
              {% endcomment %}
              <ul class="fbt-product-list slider-4">
                {% for handle in product_handles limit: limit %}
                  {% assign product = all_products[handle] %}
                  {% assign total_price = total_price | plus: product.selected_or_first_available_variant.price %}
                  <li
                    class="fbt-product-item"
                    {% if forloop.index == 1 %}
                      style="display: none;"
                    {% endif %}
                  >
                    <div class="fbt-add-checkbox-wrapper">
                      {% if forloop.index == 1 %}
                        <input id="fbt-add-checkbox-{{ product.id }}" class="fbt-add-checkbox" type="checkbox" checked>
                      {% else %}
                        <input id="fbt-add-checkbox-{{ product.id }}" class="fbt-add-checkbox" type="checkbox">
                      {% endif %}
                      <label class="subtitulo-5 olive" for="fbt-add-checkbox-{{ product.id }}">
                        {% render 'fbt-check' -%}
                        {{- text_add_this }}
                      </label>
                      <h3 class="fbt-product-title subtitulo-3" style="padding: 0 0 0 20px;">
                        {% if forloop.index > 1 %}+{% endif -%}
                        {{- product.title }}
                      </h3>
                    </div>

                    <img
                      class="fbt-product-img img-fluid {{ section.settings.fbt_product_img_border }}"
                      src="{{ product.featured_image.src | image_url: width: img_width, height: img_height, crop: 'center' }}"
                      alt="{{ product.featured_image.alt | escape }}"
                      width="{{ img_width }}"
                      height="{{ img_height }}"
                      loading="lazy"
                    >
                    <div class="card-fbt-footer">
                      <p class="subtitulo-3 fbt-product-price-final">
                        <strong>{{ product.price | money }} COP </strong>
                      </p>
                      <p class="parrafo-3 agregado">MONTO AGREGADO</p>
                    </div>
                    <select
                      class="fbt-variant-select"
                      name="id"
                      aria-label="Select variant"
                      style="{% if product.has_only_default_variant %}display: none;{% endif %}"
                    >
                      {% for variant in product.variants %}
                        {% liquid
                          assign variant_image = null
                          if variant.image
                            assign variant_image = variant.image | image_url: width: img_width, height: img_height, crop: 'center'
                          endif
                        %}
                        <option
                          value="{{ variant.id }}"
                          data-image="{{ variant_image }}"
                          data-compare-price="{{ variant.compare_at_price }}"
                          data-price="{{ variant.price }}"
                          {% unless variant.available %}
                            disabled
                          {% endunless %}
                        >
                          {{ variant.title }}
                        </option>
                      {% endfor %}
                    </select>
                  </li>
                {% endfor %}
              </ul>
              <button type="button" class="slick-next-c">{% render 'fbt-arrow' %}</button>
              <p class="fbt-total-price-wrapper" style="display: none;">
                <span class="subtitulo-1"> {{ text_total_price }}: </span>
                <b class="subtitulo-1 fbt-total-price">
                  {{ total_price | money }}
                </b>
              </p>
            </frequently-bought-together>

            <script>
              $('.slick-next-c').on('click', () => {$('.slider-4').slick('slickNext')});

              if ($(window).width() < 768) {
                 $(".fbt-product-list").removeClass("slider-4");
                  document.querySelectorAll('.fbt-product-item').forEach((item) => {
                  item.querySelector('.fbt-product-title').style.display = 'none';
                  })
              }
            </script>
          </add-combo>
          {% if section.settings.envio != blank %}
            <shipping class="extra-product">
              {% render 'icon-transport' %}
              <p class="subtitulo-2" id="ss">{{ section.settings.envio }}</p>
            </shipping>
          {% endif %}
        </container-spam>
      </product-information>
    </main-pr-container>
  </product-form>
</div>

<script>
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  /* FAQ DROPDOWN ANIMATION */
document.addEventListener('DOMContentLoaded', function() {
  var faqTitles = document.querySelectorAll('.FAQ-title');
  var openAnswer = null; // Keeps track of the currently open answer
  var openTitle = null; // Keeps track of the currently open FAQ title

  faqTitles.forEach(function(title) {
    title.addEventListener('click', function() {
      var answer = this.nextElementSibling;

      if (openAnswer === answer) {
        // Clicking on the same FAQ title again, close the answer and rotate the SVG back
        toggleSlide(answer);
        rotateSvg(this, '0deg');
        openAnswer = null;
        openTitle = null;
      } else {
        // Clicking on a different FAQ title
        if (openAnswer) {
          // Close the previously open answer and rotate its SVG back
          toggleSlide(openAnswer);
          rotateSvg(openTitle, '0deg');
        }

        // Open the clicked answer and rotate its SVG
        toggleSlide(answer);
        rotateSvg(this, '90deg');
        openAnswer = answer;
        openTitle = this;
      }
    });
  });
});

function toggleSlide(element) {
  var isHidden = getComputedStyle(element).height === '0px';

  if (isHidden) {
    element.style.height = 'auto';
    element.style.marginTop = '15px';
    element.style.marginBottom = '10px';
  } else {
    element.style.height = '0px';
    element.style.marginTop = '0px';
    element.style.marginBottom = '0px';
  }
}

function rotateSvg(title, rotation) {
  var svgElement = title.querySelector('svg');
  svgElement.style.transform = `rotate(${rotation})`;
}
























</script>

{% schema %}
{
  "name": "PÃ¡gina del producto",
  "settings": [
    {
      "type": "text",
      "id": "envio",
      "label": "Contenido del item envÃ­os "
    }, {
      "type": "text",
      "id": "info-extra",
      "label": "Contenido del item informacion extra "
    }, {
      "type": "text",
      "id": "button-title",
      "label": "Titulo boton",
      "default": "Agregar al carrito"
    }, {
      "type": "product_list",
      "id": "collection",
      "label": "collection"
    }, {
      "type": "text",
      "id": "button-text",
      "label": "Boton de texto",
      "default": "AÃ±adir al carrito"
    }, {
    "type": "text",
    "id": "subtitulo-fotos",
    "label": "Ver Todos",
    "default": "Ver todos"
  }, {
    "type": "text",
    "id": "title",
    "label": "titulo section",
    "default": "Otros Clientes tambiÃ©n compraron"
  }, {
    "type": "text",
    "id": "agregar-combo",
    "label": "Agregar a tu Combo",
    "default": "Agregar a tu combo"
  }, {
    "type": "text",
    "id": "recommended-products",
    "label": "Productos recomendados",
    "default": "Otros Clientes tambiÃ©n compraron"
  }, {
    "type": "text",
    "id": "complementary-products",
    "label": "Productos complementarios",
    "default": "Agrega a tu combo"
  }, {
    "type": "text",
    "id": "add-to-cart-title",
    "label": "Titulo Boton",
    "default": "AÃ±adir al carrito"
  }, {
    "type": "text",
    "id": "description-title",
    "label": "titulo descipcion",
    "default": "DescripciÃ³n"
  }
  ]
}
{% endschema %}
