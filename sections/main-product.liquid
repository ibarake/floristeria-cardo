<section class="main-product">
  <main-pr-container>
    <div class="flor22-3">
      {% render 'Flor-2' %}
    </div>
    <div class="flor11-2">
      {% render 'Flor-1' %}
    </div>
    <product-page>
      {{ product.featured_image | img_tag: product.featured_image.alt, 'image-product', '535x533' }}
    </product-page>
    <product-information>
      <p class="subtitulo-3" id="pr-subtitle">
        {{ product.collections[0].title }}
      </p>
      <h3 class="titulo-3" id="pr-title">
        {{ product.title }}
      </h3>
      <h5 class="titulo-5" id="pr-price">
        {{ product.price | money }}
      </h5>
      <product-page id="responsive-image">
        <img
          id="responsive-image-2"
          src="{{ product.featured_image | img_url: product.featured_image.url }}"
          alt="{{ product.featured_image.alt }}"
        >
      </product-page>
      <p class="subtitulo-6" id="pr-description">
        {{ product.description | strip_html }}
      </p>
      <container-buttons>
        {% form 'product', product, class: 'product-form', novalidate: 'novalidate', id: 'pr-form-wd' %}
          <select name="id" style="display: none;">
            {% for variant in product.variants %}
              <option
                value="{{ variant.id }}"
                {% if variant == product.selected_or_first_available_variant %}
                  selected="selected"
                {% endif %}
              >
                {{ variant.title }} - {{ variant.price | money }}
              </option>
            {% endfor %}
          </select>
          <quantity>
            <input type="button" value="-" class="pq-button button-minus" data-field="quantity">
            <input readonly type="number" step="1" max="" value="1" name="quantity" class="quantity-field">
            <input type="button" value="+" class="pq-button button-plus" data-field="quantity">
          </quantity>
          <add-to-car id="atc">
            <button class="atc-product add-t-cart">
              {% render 'icon-cart' %}
              <p class="add-t-cart-text subtitulo-2">
                <b> {{ section.settings['button-title'] }} </b>
              </p>
            </button>
          </add-to-car>
          <payment class="subtitulo-2 payment-1">
            {{ form | payment_button }}
          </payment>
        {% endform %}
      </container-buttons>
      <faq class="faq-container" id="description-product">
        <question class="FAQ-title subtitulo-3">
          <h3 class="subtitulo-3">
            {{ section.settings['description-title'] }}
          </h3>
          {% render 'icon-arrow-right-dropdown' %}
        </question>
        <answer class="FAQ-text parrafo-2">
          {{ product.description | strip_html }}
        </answer>
      </faq>
      <container-spam>
        {% if section.settings.envio != blank %}
          <shipping class="extra-product">
            {% render 'icon-transport' %}
            <p class="subtitulo-2" id="ss">{{ section.settings.envio }}</p>
          </shipping>
        {% endif %}
        {% if section.settings['info-extra'] != blank %}
          <information class="extra-product">
            {% render 'icon-information' %}
            <p class="subtitulo-2" id="ss">{{ section.settings['info-extra'] }}</p>
          </information>
        {% endif %}
      </container-spam>
    </product-information>
  </main-pr-container>
  <add-combo>
    {% render 'eg-frequently-bought-together' %}
  </add-combo>
</section>

<script>
  
  
  <script>
    
    
    
    
    
    
    window.money_format = '{{ shop.money_format }}'
    window.cart_route = '{{ routes.cart_url }}'

    class FrequentlyBoughtTogether extends HTMLElement {
        constructor () {
            super()

            this.querySelectorAll('.fbt-variant-select').forEach((select) => {
                select.addEventListener('change', () => {
                    this.onSelectChange(select)
                })
            })

            this.querySelectorAll('.fbt-add-checkbox').forEach((checkbox) => {
                checkbox.addEventListener('change', () => {
                    this.onCheckboxChange(checkbox)
                })
            })

            this.querySelector('.fbt-btn-atc').addEventListener('click', this.addSelectedToCart.bind(this))
        }

        onSelectChange (select) {
            const { image, comparePrice, price } = select.options[select.selectedIndex].dataset

            const productItem = select.closest('.fbt-product-item')
            const imgEl = productItem.querySelector('.fbt-product-img')
            const comparePriceEl = productItem.querySelector('.fbt-product-price-compare')
            const priceEl = productItem.querySelector('.fbt-product-price-final')

            if (image) {
                imgEl.setAttribute('src', image)
            }

            if (comparePrice) {
                comparePriceEl.style.display = 'inline-block'
                comparePriceEl.querySelector('s').textContent = this.moneyFormat(comparePrice)
            } else {
                comparePriceEl.style.display = 'none'
                comparePriceEl.querySelector('s').textContent = ''
            }
            
            priceEl.textContent = this.moneyFormat(price)

            this.calcTotalPrice()
        }

        onCheckboxChange (checkbox) {
            const productItem = checkbox.closest('.fbt-product-item')
            const imgEl = productItem.querySelector('.fbt-product-img')

            if (checkbox.checked) {
                imgEl.style.opacity = '1'
            } else {
                imgEl.style.opacity = '0.2'
            }
            
            this.calcTotalPrice()
        }

        calcTotalPrice () {
            let totalPrice = 0
            
            this.querySelectorAll('.fbt-variant-select').forEach((select) => {
                if (select.closest('.fbt-product-item').querySelector('.fbt-add-checkbox').checked) {
                    totalPrice += Number(select.options[select.selectedIndex].dataset.price)
                }
            })
            
            this.querySelector('.fbt-total-price').textContent = this.moneyFormat(totalPrice)

            if (totalPrice === 0) {
                this.querySelector('.fbt-btn-atc').disabled = true
            } else {
                this.querySelector('.fbt-btn-atc').disabled = false
            }
        }

        async addSelectedToCart () {
            const btn = this.querySelector('.fbt-btn-atc')
            btn.style.width = `${btn.clientWidth}px`

            btn.innerHTML = `
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            `

            const items = []

            this.querySelectorAll('.fbt-variant-select').forEach((select) => {
                if (select.closest('.fbt-product-item').querySelector('.fbt-add-checkbox').checked) {
                    items.push({
                        id: Number(select.value),
                        quantity: 1
                    })
                }
            })

          console.log(items)

            await fetch('/cart/add.js', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ items })
            })

            if (document.querySelector('#cart-drawer')) {
                btn.innerHTML = btn.dataset.textAddSelected
                loadEgCartDrawer(true)
            } else {
                location.href = window.cart_route
            }
        }

        // Shopify format money (helper function)
        // https://gist.github.com/stewartknapman/8d8733ea58d2314c373e94114472d44c
        moneyFormat (cents, format) {
            if (typeof cents === 'string') {
                cents = cents.replace('.', '');
            }
            let value = '';
            const placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
            const formatString = (format || window.money_format);

            function defaultOption(opt, def) {
                return (typeof opt === 'undefined' ? def : opt);
            }

            function formatWithDelimiters(number, precision, thousands, decimal) {
                precision = defaultOption(precision, 2);
                thousands = defaultOption(thousands, ',');
                decimal = defaultOption(decimal, '.');

                if (Number.isNaN(number) || number == null) { return 0; }

                number = (number / 100.0).toFixed(precision);

                const parts = number.split('.');
                const dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands);
                cents = parts[1] ? (decimal + parts[1]) : '';

                return dollars + cents;
            }

            switch (formatString.match(placeholderRegex)[1]) {
                case 'amount': value = formatWithDelimiters(cents, 2); break;
                case 'amount_no_decimals': value = formatWithDelimiters(cents, 0); break;
                case 'amount_with_comma_separator': value = formatWithDelimiters(cents, 2, '.', ','); break;
                case 'amount_no_decimals_with_comma_separator': value = formatWithDelimiters(cents, 0, '.', ','); break;
            }

            return formatString.replace(placeholderRegex, value);
        }
    }
    customElements.define('frequently-bought-together', FrequentlyBoughtTogether)







  </script>
  
  
  
  
  
  /* FAQ DROPDOWN ANIMATION */
document.addEventListener('DOMContentLoaded', function() {
  var faqTitles = document.querySelectorAll('.FAQ-title');
  var openAnswer = null; // Keeps track of the currently open answer
  var openTitle = null; // Keeps track of the currently open FAQ title

  faqTitles.forEach(function(title) {
    title.addEventListener('click', function() {
      var answer = this.nextElementSibling;

      if (openAnswer === answer) {
        // Clicking on the same FAQ title again, close the answer and rotate the SVG back
        toggleSlide(answer);
        rotateSvg(this, '0deg');
        openAnswer = null;
        openTitle = null;
      } else {
        // Clicking on a different FAQ title
        if (openAnswer) {
          // Close the previously open answer and rotate its SVG back
          toggleSlide(openAnswer);
          rotateSvg(openTitle, '0deg');
        }

        // Open the clicked answer and rotate its SVG
        toggleSlide(answer);
        rotateSvg(this, '90deg');
        openAnswer = answer;
        openTitle = this;
      }
    });
  });
});

function toggleSlide(element) {
  var isHidden = getComputedStyle(element).height === '0px';

  if (isHidden) {
    element.style.height = 'auto';
    element.style.marginTop = '15px';
    element.style.marginBottom = '10px';
  } else {
    element.style.height = '0px';
    element.style.marginTop = '0px';
    element.style.marginBottom = '0px';
  }
}

function rotateSvg(title, rotation) {
  var svgElement = title.querySelector('svg');
  svgElement.style.transform = `rotate(${rotation})`;
}

const handleIntersection = (entries, observer) => {
  if (!entries[0].isIntersecting) return;

  observer.unobserve(productRecommendationsSection);

  const url = productRecommendationsSection.dataset.url;

  fetch(url)
    .then(response => response.text())
    .then(text => {
      const html = document.createElement('div');
      html.innerHTML = text;
      const recommendations = html.querySelector('.product-recommendations');

      if (recommendations && recommendations.innerHTML.trim().length) {
        productRecommendationsSection.innerHTML = recommendations.innerHTML;
      }
    })
    .catch(e => {
      console.error(e);
    });
};

const productRecommendationsSection = document.querySelector('.product-recommendations');
const observer = new IntersectionObserver(handleIntersection, {rootMargin: '0px 0px 200px 0px'});

observer.observe(productRecommendationsSection);








</script>

{% schema %}
{
  "name": "Página del producto",
  "settings": [
    {
      "type": "text",
      "id": "envio",
      "label": "Contenido del item envíos "
    }, {
      "type": "text",
      "id": "info-extra",
      "label": "Contenido del item informacion extra "
    }, {
      "type": "text",
      "id": "button-title",
      "label": "Titulo boton",
      "default": "Agregar al carrito"
    }, {
      "type": "product_list",
      "id": "collection",
      "label": "collection"
    }, {
      "type": "text",
      "id": "button-text",
      "label": "Boton de texto",
      "default": "Añadir al carrito"
    }, {
    "type": "text",
    "id": "subtitulo-fotos",
    "label": "Ver Todos",
    "default": "Ver todos"
  }, {
    "type": "text",
    "id": "title",
    "label": "titulo section",
    "default": "Otros Clientes también compraron"
  }, {
    "type": "text",
    "id": "agregar-combo",
    "label": "Agregar a tu Combo",
    "default": "Agregar a tu combo"
  }, {
    "type": "text",
    "id": "recommended-products",
    "label": "Productos recomendados",
    "default": "Otros Clientes también compraron"
  }, {
    "type": "text",
    "id": "complementary-products",
    "label": "Productos complementarios",
    "default": "Agrega a tu combo"
  }, {
    "type": "text",
    "id": "add-to-cart-title",
    "label": "Titulo Boton",
    "default": "Añadir al carrito"
  }, {
    "type": "text",
    "id": "description-title",
    "label": "titulo descipcion",
    "default": "Descripción"
  }
  ]
}
{% endschema %}
